"  AUTOGROUPS {{{
" =============================================================================

augroup configgroup
  autocmd!
  autocmd BufEnter Rakefile Gemfile Vagrantfile set filetype=ruby
  autocmd BufEnter *.md set filetype=markdown
  autocmd BufWritePost *vimrc* source %
augroup end

" }}}
" COLORS {{{

" Enable syntax highlighting
syntax enable

"Set colorscheme to Solarized
"let g:solarized_termtrans=1
"set background=dark
"colorscheme solarized

"Set colorscheme to Molokai
colorscheme molokai

"}}}
" PLUGIN OPTIONS {{{
"
"vim-airline options
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" {{{ SPACES & TABS
"
set tabstop=2
set expandtab
set shiftwidth=2
set softtabstop=2

" Auto indent
set autoindent
set smartindent

 " }}}
" UI CONFIG {{{

" Enable line numbers
set number

"  Highlight current line
set cursorline

" Disable mouse
set mouse=

" Increase History
set history=100

" Give context to where the cursor is positioned in a file
set scrolloff=14

" Visual autocomplete for command menu
set wildmenu

" Redraw only when we ned to
set lazyredraw


" highlight matching brackets
set showmatch

" Highlight column 80
if exists('+colorcolumn')
    set colorcolumn=80
else
    au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Hide buffers after they are abandoned
set hidden

" Highlight Trailing Whitespace
highlight ExtraWhitespace ctermbg=darkblue guibg=darkblue
match ExtraWhitespace /\s\+$/

" Auto Complete Menu
set completeopt=longest,menu

" }}}
" SEARCHING {{{

" Enable highlight search and highlight when searching
set hlsearch
set incsearch

" Ignore case when searching
set ignorecase
set smartcase

" Turn off search highlight with <leader><space>
nnoremap <leader><space> :nohlsearch<CR>

" }}}
" FOLDING {{{

" enable folding
set foldenable

" Open up to 10 folds by default
set foldlevelstart=10

" Max nested folds
set foldnestmax=10

" space opens/closes folds
nnoremap <space> za


"}}}
" MOVEMENT {{{

" Set to allow you to backspace while back past insert mode
set backspace=2

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" highlight last inserted text
nnoremap gV `[v`]

" Open file and goto previous location
autocmd BufReadPost *  if line("'\"") > 1 && line("'\"") <= line("$")
    \|     exe "normal! g`\""
    \|  endif

" }}}
" SHORTCUTS {{{

" Clear whitespace at end of line with '_$'
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" }}}
" BACKUPS & HISTORY {{{

" Disable files that don't need to be created
set noswapfile
set nobackup
set nowritebackup

" Persistent Undo
if v:version >= 703
    set undofile
    set undodir=~/.vim/tmp,~/.tmp,~/tmp,~/var/tmp,/tmp
endif

" }}}
" FUNCTIONS {{{

" toggle between number and relativenumber
function! ToggleNumber()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}
" VARIOUS REMAPS {{{

" Spelling / Typos
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q

" }}}

set modelines=1
" vim:foldmethod=marker:foldlevel=0
